pipeline {
  agent any
// hi
  // Use your Docker-Hub creds & image name
  environment {
    DOCKER_HUB_CREDENTIALS = 'dockerhub-credentials2'
    DOCKER_IMAGE           = 'hamzah64/final-proj'
    IMAGE_TAG              = 'latest'
  }

  // We trigger on SCM polling (you’ll also need “GitHub hook trigger”
  // enabled in the job’s Build Triggers section)
  triggers {
    pollSCM('H/5 * * * *')
  }

  stages {
    // Only run the pipeline if this is a Pull Request with target == "test"
    stage('Validate PR') {
      when {
        allOf {
          // Jenkins sets CHANGE_ID/CHANGE_TARGET for PRs
          expression { return env.CHANGE_ID != null }
          changeRequest target: 'test1'
        }
      }
      steps {
        echo "➡️  Building PR #${env.CHANGE_ID} (target=${env.CHANGE_TARGET})"
      }
    }

    stage('Checkout') {
      when { changeRequest target: 'test1' }
      steps {
        checkout scm
      }
    }

    stage('Fetch Data') {
      when { changeRequest target: 'test1' }
      steps {
        script {
          if (isUnix()) {
            sh 'python3 -m pip install --upgrade pip'
            sh 'python3 -m pip install -r requirements.txt dvc'
            sh 'dvc pull'
          } else {
            bat 'python -m pip install --upgrade pip'
            bat 'python -m pip install -r requirements.txt dvc'
            bat 'python -m dvc pull'
          }
        }
      }
    }

    stage('Build & Tag Docker Image') {
      when { changeRequest target: 'test1' }
      steps {
        script {
          docker.build("${env.DOCKER_IMAGE}:${env.IMAGE_TAG}")
        }
      }
    }

    stage('Push to Docker Hub') {
      when { changeRequest target: 'test1' }
      steps {
        withCredentials([usernamePassword(
          credentialsId: env.DOCKER_HUB_CREDENTIALS,
          usernameVariable: 'DOCKERHUB_USER',
          passwordVariable: 'DOCKERHUB_PASS'
        )]) {
          sh """
            docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASS
            docker push ${env.DOCKER_IMAGE}:${env.IMAGE_TAG}
          """
        }
      }
    }
  }

  post {
    success {
      echo "✅ PR #${env.CHANGE_ID} built & Docker image pushed."
    }
    failure {
      echo "❌ PR #${env.CHANGE_ID} build failed."
    }
  }
}
